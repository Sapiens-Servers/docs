import{_ as s,c as e,o as a,a2 as i}from"./chunks/framework.CQ12TVIp.js";const g=JSON.parse('{"title":"Getting Started with SteamCMD","description":"","frontmatter":{},"headers":[],"relativePath":"guides/steamcmd.md","filePath":"guides/steamcmd.md"}'),t={name:"guides/steamcmd.md"},n=i(`<h1 id="getting-started-with-steamcmd" tabindex="-1">Getting Started with SteamCMD <a class="header-anchor" href="#getting-started-with-steamcmd" aria-label="Permalink to &quot;Getting Started with SteamCMD&quot;">​</a></h1><p>This guide is intented to run the dedicated server bare metal using SteamCMD.</p><h2 id="ensuring-the-required-glibc-dependencies" tabindex="-1">Ensuring the required GLIBC dependencies <a class="header-anchor" href="#ensuring-the-required-glibc-dependencies" aria-label="Permalink to &quot;Ensuring the required GLIBC dependencies&quot;">​</a></h2><p>The dedicated server has bleeding edge glibc requirements. As of writing, you need <code>GLIBC_2.39</code>, which many Linux distros don&#39;t ship with. We recommend:</p><ol><li><a href="https://archlinux.org/" target="_blank" rel="noreferrer">Arch Linux</a></li><li><a href="https://ubuntu.com/" target="_blank" rel="noreferrer">Ubuntu 23</a> or later</li></ol><p>Alternatively, you can download <a href="https://ftp.gnu.org/gnu/glibc/" target="_blank" rel="noreferrer">GLIBC</a> yourself and place the resulting binaries in the same directory as the server.</p><h2 id="installing-steamcmd" tabindex="-1">Installing SteamCMD <a class="header-anchor" href="#installing-steamcmd" aria-label="Permalink to &quot;Installing SteamCMD&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can skip this step if you have <code>steamcmd</code> available.</p></div><p>Go over to <a href="https://developer.valvesoftware.com/wiki/SteamCMD" target="_blank" rel="noreferrer">Valve&#39;s documentation</a> and download/install SteamCMD for your operating system. Typically, you want to use the version that&#39;s distributed with your package manager, but downloading manually works as well.</p><h2 id="downloading-updating-the-dedicated-server" tabindex="-1">Downloading/updating the dedicated server <a class="header-anchor" href="#downloading-updating-the-dedicated-server" aria-label="Permalink to &quot;Downloading/updating the dedicated server&quot;">​</a></h2><p>First, pick a directory to install your dedicated server, and open it in your command shell. Then, use SteamCMD to download the required files.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">steamcmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +force_install_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> anonymous</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +app_update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2886350</span></span></code></pre></div><p>This command also works to update the server when a new version is released. We also recommend placing this command (or your version of it) in a file called <code>update.sh</code> so you don&#39;t need to remember it.</p><h2 id="running-your-server" tabindex="-1">Running your server <a class="header-anchor" href="#running-your-server" aria-label="Permalink to &quot;Running your server&quot;">​</a></h2><p>For testing, you can use this command to run your server (it uses the world name <code>world</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./linuxServer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span></span></code></pre></div><p>We recommend placing this command (or your version of it) in a script called <code>start.sh</code>.</p><p>If you want to keep your server up for any length of time, you&#39;d likely want to use some sort of process management. The simplest is <code>screen</code>, which allows you to detach from processes as needed.</p><h3 id="using-screen" tabindex="-1">Using <code>screen</code> <a class="header-anchor" href="#using-screen" aria-label="Permalink to &quot;Using \`screen\`&quot;">​</a></h3><p>First, open a new <code>screen</code> session by running <code>screen</code>. Then, run the server&#39;s start command. Then press <code>Ctrl+A</code> then <code>D</code> to exit the screen while leaving the process running. You can return to the <code>screen</code> at any time by using <code>screen -r</code>.</p><h3 id="using-a-script-to-automatically-restart-the-server" tabindex="-1">Using a script to automatically restart the server <a class="header-anchor" href="#using-a-script-to-automatically-restart-the-server" aria-label="Permalink to &quot;Using a script to automatically restart the server&quot;">​</a></h3><p>If your server goes down for any reason, you&#39;ll have to log on to your server to restart it. This script keeps it running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Loop indefinitely. CTRL+C will break you out to commandline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Execute the command</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ./linuxServer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --yes</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Check the exit status of the command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Server stopped. Restart in 5 seconds...&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Server stopped gracefully.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Exit the loop if the server stopped gracefully</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Add a delay before restarting the server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Restarting server...&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div>`,23),r=[n];function l(h,o,d,p,c,k){return a(),e("div",null,r)}const m=s(t,[["render",l]]);export{g as __pageData,m as default};
